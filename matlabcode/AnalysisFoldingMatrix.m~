% Plot folding matrices
%
% mikael.mieskolainen@cern.ch, 2018
% Licensed under the MIT License <http://opensource.org/licenses/MIT>.

clear; close all;
addpath /home/user/cernbox/#matlabcodes
addpath ./src

basepath = '/home/user/cernbox/ALICE/Diffractive-Combinatorics/figures_xsec';
run = 274593;

% Monte Carlos
mctypes = {'Pythia-6_(17h7a)', 'Phojet_(17h7b)'};

for k = 1%:length(mctypes)

fig1 = figure('units', 'normalized', 'outerposition', [0 0 1 1]);

mc = mctypes{k};

filename = sprintf('%s/%d/Unfolding/FoldingMatrix_%s.csv', basepath, run, mc);
X = csvread(filename);

% Normalize columns to 1
for i = 1:size(X,2)
   X(:,i) = X(:,i) / sum(X(:,i)); 
end
X = X'; % Transpose
N = log2(size(X,1));

imagesc(0:2^N-1, 0:2^N-1, X); hold on;

THRESH = 5;
for i = 1:10:size(X,1)
    for j = 1:10:size(X,2)
        value = X(i,j) * 1
        if (value
        text(i - 0.5, j, sprintf('%0.0f', value),'color',[1 1 1],'fontsize', 7);
    end
end

%set(gca,'YDir','normal');
set(gca,'FontSize', 6);

xlabel('Generator level', 'interpreter', 'latex', 'fontsize', 12);
ylabel('Detector level',  'interpreter', 'latex', 'fontsize', 12);

%labels = {};
%for i = 0:size(X,1)-1
%   labels{end+1} = sprintf('%d', i); 
%end
labels = makelegend(N, true);

xticks(0:size(X,1)-1);
yticks(0:size(X,1)-1);
xticklabels(labels); xtickangle(90);
yticklabels(labels);
set(gca,'TickLabelInterpreter', 'latex');

axis square;
colormap(parula(256));
colorbar;
caxis([0 1]);

%outputfile = sprintf('Run_%d_foldingmatrix_%s', run, mc);
%print(fig1, sprintf('./unfoldfigs/%s.pdf', outputfile), '-dpdf');
%system(sprintf('pdfcrop --margins 2 ./gapfigs/%s.pdf ./gapfigs/%s.pdf', outputfile, outputfile));

end
